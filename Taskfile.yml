# https://taskfile.dev
version: '3'

vars:
  WORKSPACE_DIR: "workspace"

tasks:
  fix:
    desc: Fix Terraform formatting
    cmds:
      - task: terraform-command
        vars: { TF_COMMAND: "fmt -recursive -write=true", TF_CMD_DIR: "{{.ROOT_DIR}}" }

  lint:
    desc: Formatting and linting
    cmds:
      - task: terraform-validate
      - task: terraform-format-check

  plan:
    desc: Run "terraform plan" in "{{.USER_WORKING_DIR}}"
    requires:
      vars: [OPSLEVEL_API_TOKEN]
    cmds:
      - task: init
      - task: terraform-command
        vars: { TF_COMMAND: 'plan', TF_CMD_DIR: "{{.USER_WORKING_DIR}}" }

  apply:
    desc: Run "terraform apply" in "{{.USER_WORKING_DIR}}"
    requires:
      vars: [OPSLEVEL_API_TOKEN]
    cmds:
      - task: init
      - task: terraform-command
        vars: { TF_COMMAND: 'apply', TF_CMD_DIR: "{{.USER_WORKING_DIR}}" }

  apply-demo:
    desc: Run "terraform apply" to generate a demo account
    requires:
      vars: [PAYLOAD]
    env:
      OPSLEVEL_API_TOKEN:
        sh: echo "$PAYLOAD" | jq -r '.api_token'
      TF_VAR_USER_EMAIL:
        sh: echo "$PAYLOAD" | jq -r '.user_email'
    cmds:
      - task: init
      - task: terraform-command
        vars: { TF_COMMAND: 'apply', TF_CMD_DIR: "./demo" }

  destroy:
    desc: Run "terraform destroy" in "{{.USER_WORKING_DIR}}"
    requires:
      vars: [OPSLEVEL_API_TOKEN]
    cmds:
      - task: init
      - task: terraform-command
        vars: { TF_COMMAND: 'destroy', TF_CMD_DIR: "{{.USER_WORKING_DIR}}" }

  init:
    internal: true
    desc: Run "terraform init -upgrade" in "{{.USER_WORKING_DIR}}"
    cmds:
      - task: terraform-command
        vars: { TF_COMMAND: 'init --upgrade', TF_CMD_DIR: "{{.USER_WORKING_DIR}}" }

  terraform-validate:
    internal: true
    cmds:
      - task: terraform-command
        vars: { TF_COMMAND: "validate -no-tests", TF_CMD_DIR: "{{.ROOT_DIR}}" }

  terraform-format-check:
    internal: true
    cmds:
      - cmd: echo "Listing all terraform files that need formatting..."
      - task: terraform-command
        vars: { TF_COMMAND: "fmt -recursive -check", TF_CMD_DIR: "{{.ROOT_DIR}}" }

  terraform-command:
    internal: true
    requires:
      vars: [TF_COMMAND, TF_CMD_DIR]
    preconditions:
      - sh: 'which terraform'
        msg: '"terraform" needed - run "brew install terraform"'
    cmds:
      - task: install-terraform
      - "terraform -chdir={{.TF_CMD_DIR}} {{.TF_COMMAND}} {{.CLI_ARGS}}"

  install-terraform:
    internal: true
    platforms: [darwin]
    preconditions:
      - sh: 'which brew'
        msg: '"brew" needed to install terraform - see https://brew.sh'
    status:
      - test -n "command -v terraform"
    cmds:
      - echo "Installing terraform..."
      - brew tap hashicorp/tap
      - brew install hashicorp/tap/terraform
